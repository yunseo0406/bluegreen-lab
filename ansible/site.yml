---
# Play 1) Terraform 실행 + 출력 수집 + 동적 호스트 추가
- name: Provision infra with Terraform and collect outputs
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    terraform_dir: "../terraform"                 # 필요시 경로 조정
    ssh_key_path: "~/.ssh/ncp20250904.pem"        # 네가 만든 PEM 경로
    ssh_user: "ubuntu"                            # Ubuntu 이미지 기준(ROCKY면 rocky/centos)
    tf_state: "present"                           # present=apply, absent=destroy
  tasks:
    - name: Ensure Terraform CLI is available
      ansible.builtin.command: terraform -version
      register: tf_ver
      changed_when: false

    - name: Ensure ssh key permissions
      ansible.builtin.file:
        path: "{{ ssh_key_path | expanduser }}"
        mode: "0600"

    - name: Terraform {{ tf_state }}
      community.general.terraform:
        project_path: "{{ terraform_dir }}"
        force_init: true
        state: "{{ tf_state }}"   # present=apply / absent=destroy
      register: tf_apply

    - name: Read Terraform outputs
      when: tf_state == "present"
      community.general.terraform_output:
        project_path: "{{ terraform_dir }}"
      register: tf_out

    - name: Set facts from outputs
      when: tf_state == "present"
      ansible.builtin.set_fact:
        web_public_ip: "{{ tf_out.outputs.web_public_ip.value }}"
        alb_domain: "{{ (tf_out.outputs.alb_domain.value | default('')) }}"

    - name: Show outputs
      when: tf_state == "present"
      ansible.builtin.debug:
        msg:
          - "WEB IP: {{ web_public_ip }}"
          - "ALB: {{ alb_domain | default('N/A') }}"

    - name: Wait for SSH on web
      when: tf_state == "present"
      ansible.builtin.wait_for:
        host: "{{ web_public_ip }}"
        port: 22
        timeout: 600

    - name: Add dynamic host for next play
      when: tf_state == "present"
      ansible.builtin.add_host:
        name: "provisioned_web"
        ansible_host: "{{ web_public_ip }}"
        ansible_user: "{{ ssh_user }}"
        ansible_ssh_private_key_file: "{{ ssh_key_path | expanduser }}"
        groups: ["web"]

# Play 2) 새 서버에 Apache 설치 + Version 1 배포 + 검증
- name: Configure Apache and deploy Version 1
  hosts: web
  become: true
  gather_facts: true
  vars:
    page_title: "NCP Blue-Green Lab"
    version_label: "Version 1"
  tasks:
    # (선택) 원격에 Python 없을 때 부트스트랩 — 대부분 Ubuntu엔 기본 탑재
    - name: Ensure python3 exists (Debian/Ubuntu)
      ansible.builtin.raw: |
        test -e /usr/bin/python3 || (apt-get update && apt-get install -y python3)
      changed_when: false
      failed_when: false

    - name: Install Apache on Debian/Ubuntu
      ansible.builtin.apt:
        name: apache2
        state: present
        update_cache: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install Apache on RHEL/Rocky
      ansible.builtin.yum:
        name: httpd
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Enable & start Apache (Debian/Ubuntu)
      ansible.builtin.service:
        name: apache2
        state: started
        enabled: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: Enable & start Apache (RHEL/Rocky)
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Deploy index.html (Version 1)
      ansible.builtin.copy:
        dest: /var/www/html/index.html
        content: |
          <!doctype html>
          <html>
            <head><meta charset="utf-8"><title>{{ page_title }}</title></head>
            <body style="font-family: system-ui, sans-serif; padding: 24px;">
              <h1>{{ version_label }}</h1>
              <p>Host: {{ ansible_hostname }}</p>
              <p>OS: {{ ansible_distribution }} {{ ansible_distribution_version }}</p>
              <p>Time: {{ ansible_date_time.date }} {{ ansible_date_time.time }}</p>
            </body>
          </html>
        owner: root
        group: root
        mode: "0644"

    # 검증: ALB가 있으면 ALB로, 없으면 공인IP로 확인
    - name: Probe via ALB if available (localhost)
      delegate_to: localhost
      run_once: true
      vars:
        url: "{{ hostvars['localhost'].alb_domain | default('') }}"
      when: url != ''
      ansible.builtin.uri:
        url: "http://{{ url }}/"
        return_content: true
        status_code: 200
      register: http_check_alb
      retries: 30
      delay: 5
      until: http_check_alb.status == 200 and ('Version 1' in http_check_alb.content)

    - name: Probe via Web Public IP (localhost)
      delegate_to: localhost
      run_once: true
      when: hostvars['localhost'].alb_domain | default('') == ''
      ansible.builtin.uri:
        url: "http://{{ hostvars['localhost'].web_public_ip }}/"
        return_content: true
        status_code: 200
      register: http_check_ip
      retries: 30
      delay: 5
      until: http_check_ip.status == 200 and ('Version 1' in http_check_ip.content)

    - name: Success message
      delegate_to: localhost
      run_once: true
      ansible.builtin.debug:
        msg: >
          ✅ Deployed {{ version_label }}. Open:
          {{ (hostvars['localhost'].alb_domain | default(hostvars['localhost'].web_public_ip)) | regex_replace('^', 'http://') }}

